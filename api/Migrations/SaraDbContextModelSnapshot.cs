// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using api.Database.Context;

#nullable disable

namespace api.Migrations
{
    [DbContext(typeof(SaraDbContext))]
    partial class SaraDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("api.Database.Models.Analysis", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PlantDataId")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PlantDataId");

                    b.ToTable("Analysis", (string)null);
                });

            modelBuilder.Entity("api.Database.Models.AnalysisMapping", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.PrimitiveCollection<int[]>("AnalysesToBeRun")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<string>("InspectionDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Tag", "InspectionDescription")
                        .IsUnique();

                    b.ToTable("AnalysisMapping", (string)null);
                });

            modelBuilder.Entity("api.Database.Models.PlantData", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.PrimitiveCollection<int[]>("AnalysisToBeRun")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<int>("AnonymizerWorkflowStatus")
                        .HasColumnType("integer");

                    b.Property<string>("Coordinates")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("InspectionDescription")
                        .HasColumnType("text");

                    b.Property<string>("InspectionId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("InstallationCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Tag")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("PlantData", (string)null);
                });

            modelBuilder.Entity("api.Database.Models.Analysis", b =>
                {
                    b.HasOne("api.Database.Models.PlantData", null)
                        .WithMany("Analysis")
                        .HasForeignKey("PlantDataId");

                    b.OwnsOne("api.Database.Models.BlobStorageLocation", "DestinationPath", b1 =>
                        {
                            b1.Property<string>("AnalysisId")
                                .HasColumnType("text");

                            b1.Property<string>("BlobContainer")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("BlobName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("StorageAccount")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("AnalysisId");

                            b1.ToTable("Analysis", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("AnalysisId");
                        });

                    b.OwnsOne("api.Database.Models.BlobStorageLocation", "SourcePath", b1 =>
                        {
                            b1.Property<string>("AnalysisId")
                                .HasColumnType("text");

                            b1.Property<string>("BlobContainer")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("BlobName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("StorageAccount")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("AnalysisId");

                            b1.ToTable("Analysis", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("AnalysisId");
                        });

                    b.Navigation("DestinationPath");

                    b.Navigation("SourcePath")
                        .IsRequired();
                });

            modelBuilder.Entity("api.Database.Models.PlantData", b =>
                {
                    b.OwnsOne("api.Database.Models.BlobStorageLocation", "AnonymizedBlobStorageLocation", b1 =>
                        {
                            b1.Property<string>("PlantDataId")
                                .HasColumnType("text");

                            b1.Property<string>("BlobContainer")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("BlobName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("StorageAccount")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("PlantDataId");

                            b1.ToTable("PlantData", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("PlantDataId");
                        });

                    b.OwnsOne("api.Database.Models.BlobStorageLocation", "RawDataBlobStorageLocation", b1 =>
                        {
                            b1.Property<string>("PlantDataId")
                                .HasColumnType("text");

                            b1.Property<string>("BlobContainer")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("BlobName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("StorageAccount")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("PlantDataId");

                            b1.ToTable("PlantData", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("PlantDataId");
                        });

                    b.OwnsOne("api.Database.Models.BlobStorageLocation", "VisualizedBlobStorageLocation", b1 =>
                        {
                            b1.Property<string>("PlantDataId")
                                .HasColumnType("text");

                            b1.Property<string>("BlobContainer")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("BlobName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("StorageAccount")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("PlantDataId");

                            b1.ToTable("PlantData", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("PlantDataId");
                        });

                    b.Navigation("AnonymizedBlobStorageLocation")
                        .IsRequired();

                    b.Navigation("RawDataBlobStorageLocation")
                        .IsRequired();

                    b.Navigation("VisualizedBlobStorageLocation")
                        .IsRequired();
                });

            modelBuilder.Entity("api.Database.Models.PlantData", b =>
                {
                    b.Navigation("Analysis");
                });
#pragma warning restore 612, 618
        }
    }
}
